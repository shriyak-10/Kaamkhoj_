import React, { useState, useRef, useEffect } from "react";
import { useLang } from "../context/LanguageContext";

export default function VoiceBotAssistant({
  fields,
  form,
  setForm,
  mode = "form",
  onSelection
}) {
  const { lang } = useLang();

  // CRITICAL: Always use correct langCode for both TTS and SpeechRecognition!
  const langCode =
    lang === "hi" ? "hi-IN"
    : lang === "mr" ? "mr-IN"
    : "en-US";

  const [active, setActive] = useState(false);
  const [step, setStep] = useState(-1);
  const recognitionRef = useRef(null);

  // ... [PROMPTS definition unchanged] ...

  const PROMPTS = {
    en: {
      intro: mode === "form"
        ? "Welcome. I will help you fill the form. When I ask for a detail, say your answer."
        : "Let me read out the page for you.",
      ask: field => `Please say your ${field} now.`,
      confirm: (field, val) => `You said: ${val}. Thank you!`,
      end: mode === "form"
        ? "All details received. You can now review and submit the form."
        : "Page reading complete.",
      select: "Now say the name of the service you want."
    },
    hi: {
      intro: mode === "form"
        ? "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§´‡•â‡§∞‡•ç‡§Æ ‡§≠‡§∞‡•Ç‡§Å‡§ó‡§æ‡•§ ‡§Æ‡•à‡§Ç ‡§ú‡§¨ ‡§™‡•Ç‡§õ‡•Ç‡§Ç, ‡§Ö‡§™‡§®‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§"
        : "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•á‡§ú ‡§™‡§¢‡§º ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§",
      ask: field => `‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ${field} ‡§¨‡§§‡§æ‡§è‡§Å‡•§`,
      confirm: (field, val) => `‡§Ü‡§™‡§®‡•á ‡§ï‡§π‡§æ: ${val}‡•§ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!`,
      end: mode === "form"
        ? "‡§∏‡§æ‡§∞‡•á ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§Æ‡§ø‡§≤ ‡§ó‡§è‡•§ ‡§Ö‡§¨ ‡§Ü‡§™ ‡§´‡•â‡§∞‡•ç‡§Æ ‡§ï‡•ã ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§"
        : "‡§™‡•É‡§∑‡•ç‡§† ‡§™‡§¢‡§º‡§®‡§æ ‡§™‡•Ç‡§∞‡§æ‡•§",
      select: "‡§Ö‡§¨ ‡§∏‡•á‡§µ‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¨‡•ã‡§≤‡§ø‡§è‡•§"
    },
    mr: {
      intro: mode === "form"
        ? "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§Ü‡§π‡•á. ‡§Æ‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ ‡§≠‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ä‡§®. ‡§ú‡•á‡§µ‡•ç‡§π‡§æ ‡§Æ‡•Ä ‡§µ‡§ø‡§ö‡§æ‡§∞‡§§‡•ã, ‡§§‡•Å‡§Æ‡§ö‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§¨‡•ã‡§≤‡§æ."
        : "‡§Æ‡•Ä ‡§™‡•É‡§∑‡•ç‡§† ‡§µ‡§æ‡§ö‡§§‡•ã‡§Ø.",
      ask: field => `‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§Æ‡§ö‡•á ${field} ‡§∏‡§æ‡§Ç‡§ó‡§æ.`,
      confirm: (field, val) => `‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§∏‡§æ‡§Ç‡§ó‡§ø‡§§‡§≤‡•á: ${val}. ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!`,
      end: mode === "form"
        ? "‡§∏‡§∞‡•ç‡§µ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§Æ‡§ø‡§≥‡§æ‡§≤‡•Ä. ‡§Ü‡§§‡§æ ‡§´‡•â‡§∞‡•ç‡§Æ ‡§§‡§™‡§æ‡§∏‡§æ ‡§Ü‡§£‡§ø ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡§æ."
        : "‡§™‡•É‡§∑‡•ç‡§† ‡§µ‡§æ‡§ö‡§® ‡§™‡•Ç‡§∞‡•ç‡§£.",
      select: "‡§Ü‡§§‡§æ ‡§∏‡•á‡§µ‡•á‡§≤‡§æ ‡§®‡§æ‡§µ ‡§∏‡§æ‡§Ç‡§ó‡§æ."
    }
  };

  // -- CRITICAL: PASS langCode always to TTS! --
  function speak(text, cb) {
    if (window.speechSynthesis) {
      const msg = new window.SpeechSynthesisUtterance(text);
      msg.lang = langCode; // This is what makes Marathi work!
      msg.onend = cb;
      window.speechSynthesis.cancel();
      window.speechSynthesis.speak(msg);
    } else if (cb) {
      cb();
    }
  }

  function startAssistant() {
    setActive(true);
    setStep(0);
    speak(PROMPTS[lang].intro, () => {
      if (mode === "form") {
        askField(0);
      } else {
        readPage(0);
      }
    });
  }

  function askField(idx) {
    if (idx >= fields.length) {
      speak(PROMPTS[lang].end, () => setActive(false));
      setActive(false);
      setStep(-1);
      return;
    }
    setStep(idx);
    const f = fields[idx];
    speak(PROMPTS[lang].ask(f.label), () => listenForInput(f, idx));
  }

  // -- CRITICAL: Always pass langCode to SpeechRecognition! --
  function listenForInput(fieldObj, idx) {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert("Voice input not available for your browser‚Äîtype manually.");
      askField(idx + 1);
      return;
    }
    const recognition = new SpeechRecognition();
    recognition.lang = langCode; // This is what makes Marathi input work!
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    recognition.onresult = event => {
      const text = event.results[0][0].transcript;
      setForm(prev => ({ ...prev, [fieldObj.name]: text }));
      speak(PROMPTS[lang].confirm(fieldObj.label, text), () => askField(idx + 1));
    };
    recognition.onerror = () => {
      speak(lang === "en"
        ? "Didn't catch that, please try again or type."
        : lang === "hi"
        ? "‡§´‡§ø‡§∞ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç ‡§Ø‡§æ ‡§ñ‡•Å‡§¶ ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§"
        : "‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§∏‡§æ‡§Ç‡§ó‡§æ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§∏‡•ç‡§µ‡§§‡§É ‡§≤‡§ø‡§π‡§æ.",
        () => askField(idx));
    };
    recognition.start();
    recognitionRef.current = recognition;
  }

  function readPage(idx) {
    if (idx >= fields.length) {
      if (typeof onSelection === "function" || typeof setForm === "function") {
        speak(PROMPTS[lang].select, () => listenForSelection());
      } else {
        speak(PROMPTS[lang].end, () => setActive(false));
        setActive(false);
        setStep(-1);
      }
      return;
    }
    setStep(idx);
    const f = fields[idx];
    speak(f.label, () => readPage(idx + 1));
  }

  function listenForSelection() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert("Voice input not supported on your browser. Try Chrome.");
      return;
    }
    const recognition = new SpeechRecognition();
    recognition.lang = langCode; // This is what makes Marathi input work!
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    recognition.onresult = event => {
      const text = event.results[0][0].transcript;
      if (typeof onSelection === "function") {
        onSelection(text);
      } else if (typeof setForm === "function") {
        setForm(text);
      }
      stopBot();
    };
    recognition.onerror = () => {
      speak(lang === "en"
        ? "Didn't catch that, please try again or use buttons."
        : lang === "hi"
        ? "‡§´‡§ø‡§∞ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç ‡§Ø‡§æ ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Å‡•§"
        : "‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§∏‡§æ‡§Ç‡§ó‡§æ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§¨‡§ü‡§® ‡§µ‡§æ‡§™‡§∞‡§æ.",
        () => listenForSelection());
    };
    recognition.start();
    recognitionRef.current = recognition;
  }

  function stopBot() {
    setActive(false);
    setStep(-1);
    window.speechSynthesis.cancel();
    if (recognitionRef.current) recognitionRef.current.stop();
  }

  useEffect(() => { stopBot(); /*eslint-disable-next-line*/ }, [lang]);

  return (
    <>
      <button
        style={{
          position: "fixed",
          bottom: "2rem",
          right: "2rem",
          background: "#ffe08c",
          color: "#624000",
          boxShadow: "0 2px 10px #dec8a1",
          padding: "1.15em 2.25em",
          borderRadius: "62px",
          fontSize: "1.22em",
          border: "none",
          zIndex: 1800,
          cursor: "pointer",
          fontWeight: 700
        }}
        onClick={active ? stopBot : startAssistant}
      >
        ü§ñ {active ? (lang === "en" ? "Stop VoiceBot" : lang === "hi" ? "‡§µ‡•â‡§á‡§∏‡§¨‡•ã‡§ü ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç" : "‡§µ‡•ç‡§π‡•â‡§á‡§∏‡§¨‡•ã‡§ü ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§æ") :
            (lang === "en" ? "Start VoiceBot" : lang === "hi" ? "‡§µ‡•â‡§á‡§∏‡§¨‡•ã‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç" : "‡§µ‡•ç‡§π‡•â‡§á‡§∏‡§¨‡•ã‡§ü ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ")}
      </button>
      {active && step !== -1 && (
        <div style={{
          position: "fixed",
          bottom: "7.7rem",
          right: "2rem",
          background: "#fff8e4",
          color: "#8a5417",
          border: "2px solid #d9cb99",
          borderRadius: "15px",
          padding: "1em 2em",
          fontSize: "1.09em",
          fontWeight: 600,
          zIndex: 1900
        }}>
          {mode === "form"
            ? (lang === "en" ? "Filling: " : lang === "hi" ? "‡§≠‡§∞‡§®‡§æ: " : "‡§≠‡§∞‡§§‡•ã‡§Ø:") + fields[step]?.label
            : (lang === "en" ? "Reading: " : lang === "hi" ? "‡§™‡§¢‡§º‡§®‡§æ: " : "‡§µ‡§æ‡§ö‡§§‡•ã‡§Ø:") + fields[step]?.label}
        </div>
      )}
    </>
  );
}
